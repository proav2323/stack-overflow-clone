// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String      @id @default(cuid())
  name          String
  password      String
  email         String      @unique
  emailVerified DateTime?
  image         String?
  about         String?
  saves         String[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  questions     questions[]
  answers       answers[]
  reply         reply[]
  comment       comment[]
}

model questions {
  id          String    @id @default(uuid())
  title       String
  description String    @db.Text
  expection   String    @db.Text
  askedById   String
  askedBy     User      @relation(fields: [askedById], references: [id], onDelete: Cascade)
  answers     answers[]
  tags        String[]

  createdAt DateTime  @default(now())
  updatedAT DateTime  @updatedAt
  comment   comment[]
}

model answers {
  id           String    @id @default(uuid())
  questionId   String
  question     questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answeredById String
  answeredBy   User      @relation(fields: [answeredById], references: [id], onDelete: Cascade)
  answer       String    @db.Text
  replies      reply[]
  createdAt    DateTime  @default(now())
  updatedAT    DateTime  @updatedAt
}

model reply {
  id          String   @id @default(uuid())
  answerId    String
  answer      answers  @relation(fields: [answerId], references: [id], onDelete: Cascade)
  text        String
  replyedById String
  replyedBy   User     @relation(fields: [replyedById], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAT   DateTime @updatedAt
}

model comment {
  id          String    @id @default(uuid())
  questionId  String
  queston     questions @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text        String
  commentById String
  commentBy   User      @relation(fields: [commentById], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAT   DateTime  @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
